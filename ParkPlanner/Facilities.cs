// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ParkPlanner;
//
//    var facilities = Facilities.FromJson(jsonString);

namespace ParkPlanner
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Facilities
    {
        [JsonProperty("METADATA")]
        public Metadata Metadata { get; set; }

        [JsonProperty("RECDATA")]
        public List<Recdatum> Recdata { get; set; }
    }

    public partial class Metadata
    {
        [JsonProperty("RESULTS")]
        public Results Results { get; set; }

        [JsonProperty("SEARCH_PARAMETERS")]
        public SearchParameters SearchParameters { get; set; }
    }

    public partial class Results
    {
        [JsonProperty("CURRENT_COUNT")]
        public long CurrentCount { get; set; }

        [JsonProperty("TOTAL_COUNT")]
        public long TotalCount { get; set; }
    }

    public partial class SearchParameters
    {
        [JsonProperty("LIMIT")]
        public long Limit { get; set; }

        [JsonProperty("OFFSET")]
        public long Offset { get; set; }

        [JsonProperty("QUERY")]
        public string Query { get; set; }
    }

    public partial class Recdatum
    {
        [JsonProperty("ACTIVITY")]
        public List<object> Activity { get; set; }

        [JsonProperty("CAMPSITE")]
        public List<object> Campsite { get; set; }

        [JsonProperty("EVENT")]
        public List<object> Event { get; set; }

        [JsonProperty("Enabled")]
        public bool Enabled { get; set; }

        [JsonProperty("FACILITYADDRESS")]
        public List<object> Facilityaddress { get; set; }

        [JsonProperty("FacilityAdaAccess")]
        public FacilityAdaAccess FacilityAdaAccess { get; set; }

        [JsonProperty("FacilityDescription")]
        public string FacilityDescription { get; set; }

        [JsonProperty("FacilityDirections")]
        public string FacilityDirections { get; set; }

        [JsonProperty("FacilityEmail")]
        public FacilityEmail FacilityEmail { get; set; }

        [JsonProperty("FacilityID")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long FacilityId { get; set; }

        [JsonProperty("FacilityLatitude")]
        public double FacilityLatitude { get; set; }

        [JsonProperty("FacilityLongitude")]
        public double FacilityLongitude { get; set; }

        [JsonProperty("FacilityMapURL")]
        public string FacilityMapUrl { get; set; }

        [JsonProperty("FacilityName")]
        public string FacilityName { get; set; }

        [JsonProperty("FacilityPhone")]
        public string FacilityPhone { get; set; }

        [JsonProperty("FacilityReservationURL")]
        public string FacilityReservationUrl { get; set; }

        [JsonProperty("FacilityTypeDescription")]
        public FacilityTypeDescription FacilityTypeDescription { get; set; }

        [JsonProperty("FacilityUseFeeDescription")]
        public string FacilityUseFeeDescription { get; set; }

        [JsonProperty("GEOJSON")]
        public Geojson Geojson { get; set; }

        [JsonProperty("Keywords")]
        public string Keywords { get; set; }

        [JsonProperty("LINK")]
        public List<object> Link { get; set; }

        [JsonProperty("LastUpdatedDate")]
        public DateTimeOffset LastUpdatedDate { get; set; }

        [JsonProperty("LegacyFacilityID")]
        public string LegacyFacilityId { get; set; }

        [JsonProperty("MEDIA")]
        public List<Media> Media { get; set; }

        [JsonProperty("ORGANIZATION")]
        public List<object> Organization { get; set; }

        [JsonProperty("OrgFacilityID")]
        public string OrgFacilityId { get; set; }

        [JsonProperty("PERMITENTRANCE")]
        public List<object> Permitentrance { get; set; }

        [JsonProperty("ParentOrgID")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ParentOrgId { get; set; }

        [JsonProperty("ParentRecAreaID")]
        public string ParentRecAreaId { get; set; }

        [JsonProperty("RECAREA")]
        public List<object> Recarea { get; set; }

        [JsonProperty("Reservable")]
        public bool Reservable { get; set; }

        [JsonProperty("StayLimit")]
        public StayLimit StayLimit { get; set; }

        [JsonProperty("TOUR")]
        public List<object> Tour { get; set; }
    }

    public partial class Geojson
    {
        [JsonProperty("COORDINATES")]
        public List<double> Coordinates { get; set; }

        [JsonProperty("TYPE")]
        public TypeEnum Type { get; set; }
    }

    public partial class Media
    {
        [JsonProperty("Credits")]
        public Credits Credits { get; set; }

        [JsonProperty("Description")]
        public string Description { get; set; }

        [JsonProperty("EmbedCode")]
        public string EmbedCode { get; set; }

        [JsonProperty("EntityID")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long EntityId { get; set; }

        [JsonProperty("EntityMediaID")]
        public EntityMediaId EntityMediaId { get; set; }

        [JsonProperty("EntityType")]
        public FacilityTypeDescription EntityType { get; set; }

        [JsonProperty("Height")]
        public long Height { get; set; }

        [JsonProperty("IsGallery")]
        public bool IsGallery { get; set; }

        [JsonProperty("IsPreview")]
        public bool IsPreview { get; set; }

        [JsonProperty("IsPrimary")]
        public bool IsPrimary { get; set; }

        [JsonProperty("MediaType")]
        public MediaType MediaType { get; set; }

        [JsonProperty("Subtitle")]
        public string Subtitle { get; set; }

        [JsonProperty("Title")]
        public string Title { get; set; }

        [JsonProperty("URL")]
        public Uri Url { get; set; }

        [JsonProperty("Width")]
        public long Width { get; set; }
    }

    public enum FacilityAdaAccess { AdaAccessibleRestrooms, Empty, N };

    public enum FacilityEmail { Empty, GjfoWebmailBlmGov, InfoSiEdu, KfoWebmailBlmGov, SmFsMrnraUsdaGov };

    public enum FacilityTypeDescription { Campground, Facility };

    public enum TypeEnum { Empty, Point };

    public enum Credits { Empty, Landis, MichaelJTuttle, PgeParks };

    public enum MediaType { Image };

    public enum StayLimit { DayUseOnly, Empty, The14DayStayLimit };

    public partial struct EntityMediaId
    {
        public long? Integer;
        public Guid? Uuid;

        public static implicit operator EntityMediaId(long Integer) => new EntityMediaId { Integer = Integer };
        public static implicit operator EntityMediaId(Guid Uuid) => new EntityMediaId { Uuid = Uuid };
    }

    public partial class Facilities
    {
        public static Facilities FromJson(string json) => JsonConvert.DeserializeObject<Facilities>(json, ParkPlanner.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Facilities self) => JsonConvert.SerializeObject(self, ParkPlanner.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                FacilityAdaAccessConverter.Singleton,
                FacilityEmailConverter.Singleton,
                FacilityTypeDescriptionConverter.Singleton,
                TypeEnumConverter.Singleton,
                CreditsConverter.Singleton,
                EntityMediaIdConverter.Singleton,
                MediaTypeConverter.Singleton,
                StayLimitConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class FacilityAdaAccessConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FacilityAdaAccess) || t == typeof(FacilityAdaAccess?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return FacilityAdaAccess.Empty;
                case "Ada Accessible Restrooms ":
                    return FacilityAdaAccess.AdaAccessibleRestrooms;
                case "N":
                    return FacilityAdaAccess.N;
            }
            throw new Exception("Cannot unmarshal type FacilityAdaAccess");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FacilityAdaAccess)untypedValue;
            switch (value)
            {
                case FacilityAdaAccess.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case FacilityAdaAccess.AdaAccessibleRestrooms:
                    serializer.Serialize(writer, "Ada Accessible Restrooms ");
                    return;
                case FacilityAdaAccess.N:
                    serializer.Serialize(writer, "N");
                    return;
            }
            throw new Exception("Cannot marshal type FacilityAdaAccess");
        }

        public static readonly FacilityAdaAccessConverter Singleton = new FacilityAdaAccessConverter();
    }

    internal class FacilityEmailConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FacilityEmail) || t == typeof(FacilityEmail?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return FacilityEmail.Empty;
                case "Kfo_webmail.@blm.gov":
                    return FacilityEmail.KfoWebmailBlmGov;
                case "gjfo_webmail@blm.gov":
                    return FacilityEmail.GjfoWebmailBlmGov;
                case "info@si.edu":
                    return FacilityEmail.InfoSiEdu;
                case "sm.fs.mrnra@usda.gov":
                    return FacilityEmail.SmFsMrnraUsdaGov;
            }
            throw new Exception("Cannot unmarshal type FacilityEmail");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FacilityEmail)untypedValue;
            switch (value)
            {
                case FacilityEmail.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case FacilityEmail.KfoWebmailBlmGov:
                    serializer.Serialize(writer, "Kfo_webmail.@blm.gov");
                    return;
                case FacilityEmail.GjfoWebmailBlmGov:
                    serializer.Serialize(writer, "gjfo_webmail@blm.gov");
                    return;
                case FacilityEmail.InfoSiEdu:
                    serializer.Serialize(writer, "info@si.edu");
                    return;
                case FacilityEmail.SmFsMrnraUsdaGov:
                    serializer.Serialize(writer, "sm.fs.mrnra@usda.gov");
                    return;
            }
            throw new Exception("Cannot marshal type FacilityEmail");
        }

        public static readonly FacilityEmailConverter Singleton = new FacilityEmailConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class FacilityTypeDescriptionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FacilityTypeDescription) || t == typeof(FacilityTypeDescription?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Campground":
                    return FacilityTypeDescription.Campground;
                case "Facility":
                    return FacilityTypeDescription.Facility;
            }
            throw new Exception("Cannot unmarshal type FacilityTypeDescription");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FacilityTypeDescription)untypedValue;
            switch (value)
            {
                case FacilityTypeDescription.Campground:
                    serializer.Serialize(writer, "Campground");
                    return;
                case FacilityTypeDescription.Facility:
                    serializer.Serialize(writer, "Facility");
                    return;
            }
            throw new Exception("Cannot marshal type FacilityTypeDescription");
        }

        public static readonly FacilityTypeDescriptionConverter Singleton = new FacilityTypeDescriptionConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return TypeEnum.Empty;
                case "Point":
                    return TypeEnum.Point;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case TypeEnum.Point:
                    serializer.Serialize(writer, "Point");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }

    internal class CreditsConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Credits) || t == typeof(Credits?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Credits.Empty;
                case "Landis":
                    return Credits.Landis;
                case "Michael J Tuttle":
                    return Credits.MichaelJTuttle;
                case "PGE Parks":
                    return Credits.PgeParks;
            }
            throw new Exception("Cannot unmarshal type Credits");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Credits)untypedValue;
            switch (value)
            {
                case Credits.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Credits.Landis:
                    serializer.Serialize(writer, "Landis");
                    return;
                case Credits.MichaelJTuttle:
                    serializer.Serialize(writer, "Michael J Tuttle");
                    return;
                case Credits.PgeParks:
                    serializer.Serialize(writer, "PGE Parks");
                    return;
            }
            throw new Exception("Cannot marshal type Credits");
        }

        public static readonly CreditsConverter Singleton = new CreditsConverter();
    }

    internal class EntityMediaIdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(EntityMediaId) || t == typeof(EntityMediaId?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new EntityMediaId { Integer = l };
                    }
                    Guid guid;
                    if (Guid.TryParse(stringValue, out guid))
                    {
                        return new EntityMediaId { Uuid = guid };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type EntityMediaId");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (EntityMediaId)untypedValue;
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            if (value.Uuid != null)
            {
                serializer.Serialize(writer, value.Uuid.Value.ToString("D", System.Globalization.CultureInfo.InvariantCulture));
                return;
            }
            throw new Exception("Cannot marshal type EntityMediaId");
        }

        public static readonly EntityMediaIdConverter Singleton = new EntityMediaIdConverter();
    }

    internal class MediaTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MediaType) || t == typeof(MediaType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Image")
            {
                return MediaType.Image;
            }
            throw new Exception("Cannot unmarshal type MediaType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MediaType)untypedValue;
            if (value == MediaType.Image)
            {
                serializer.Serialize(writer, "Image");
                return;
            }
            throw new Exception("Cannot marshal type MediaType");
        }

        public static readonly MediaTypeConverter Singleton = new MediaTypeConverter();
    }

    internal class StayLimitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(StayLimit) || t == typeof(StayLimit?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return StayLimit.Empty;
                case "14 Day Stay Limit":
                    return StayLimit.The14DayStayLimit;
                case "Day Use Only ":
                    return StayLimit.DayUseOnly;
            }
            throw new Exception("Cannot unmarshal type StayLimit");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (StayLimit)untypedValue;
            switch (value)
            {
                case StayLimit.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case StayLimit.The14DayStayLimit:
                    serializer.Serialize(writer, "14 Day Stay Limit");
                    return;
                case StayLimit.DayUseOnly:
                    serializer.Serialize(writer, "Day Use Only ");
                    return;
            }
            throw new Exception("Cannot marshal type StayLimit");
        }

        public static readonly StayLimitConverter Singleton = new StayLimitConverter();
    }
}