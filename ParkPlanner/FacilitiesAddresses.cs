// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ParkPlannerAddresses;
//
//    var facilitiesAddresses = FacilitiesAddresses.FromJson(jsonString);

namespace ParkPlannerAddresses
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class FacilitiesAddresses
    {
        [JsonProperty("AddressCountryCode")]
        public AddressCountryCode AddressCountryCode { get; set; }

        [JsonProperty("AddressStateCode")]
        public string AddressStateCode { get; set; }

        [JsonProperty("City")]
        public string City { get; set; }

        [JsonProperty("FacilityAddressID")]
        public FacilityAddressId FacilityAddressId { get; set; }

        [JsonProperty("FacilityAddressType")]
        public FacilityAddressType FacilityAddressType { get; set; }

        [JsonProperty("FacilityID")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long FacilityId { get; set; }

        [JsonProperty("FacilityStreetAddress1")]
        public string FacilityStreetAddress1 { get; set; }

        [JsonProperty("FacilityStreetAddress2")]
        public FacilityStreetAddress2 FacilityStreetAddress2 { get; set; }

        [JsonProperty("FacilityStreetAddress3")]
        public FacilityStreetAddress3 FacilityStreetAddress3 { get; set; }

        [JsonProperty("LastUpdatedDate")]
        public DateTimeOffset LastUpdatedDate { get; set; }

        [JsonProperty("PostalCode")]
        public string PostalCode { get; set; }
    }

    public enum AddressCountryCode { Usa };

    public enum FacilityAddressType { Default, Mailing, Physical };

    public enum FacilityStreetAddress2 { Empty, The171ShorelineDrive, The19000CavesHwy, The2000LogstonBlvd, The855Hwy101 };

    public enum FacilityStreetAddress3 { Empty, PoBox65 };

    public partial struct FacilityAddressId
    {
        public long? Integer;
        public Guid? Uuid;

        public static implicit operator FacilityAddressId(long Integer) => new FacilityAddressId { Integer = Integer };
        public static implicit operator FacilityAddressId(Guid Uuid) => new FacilityAddressId { Uuid = Uuid };
    }

    public partial class FacilitiesAddresses
    {
        public static List<FacilitiesAddresses> FromJson(string json) => JsonConvert.DeserializeObject<List<FacilitiesAddresses>>(json, ParkPlannerAddresses.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<FacilitiesAddresses> self) => JsonConvert.SerializeObject(self, ParkPlannerAddresses.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AddressCountryCodeConverter.Singleton,
                FacilityAddressIdConverter.Singleton,
                FacilityAddressTypeConverter.Singleton,
                FacilityStreetAddress2Converter.Singleton,
                FacilityStreetAddress3Converter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class AddressCountryCodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AddressCountryCode) || t == typeof(AddressCountryCode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "USA")
            {
                return AddressCountryCode.Usa;
            }
            throw new Exception("Cannot unmarshal type AddressCountryCode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AddressCountryCode)untypedValue;
            if (value == AddressCountryCode.Usa)
            {
                serializer.Serialize(writer, "USA");
                return;
            }
            throw new Exception("Cannot marshal type AddressCountryCode");
        }

        public static readonly AddressCountryCodeConverter Singleton = new AddressCountryCodeConverter();
    }

    internal class FacilityAddressIdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FacilityAddressId) || t == typeof(FacilityAddressId?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new FacilityAddressId { Integer = l };
                    }
                    Guid guid;
                    if (Guid.TryParse(stringValue, out guid))
                    {
                        return new FacilityAddressId { Uuid = guid };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type FacilityAddressId");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (FacilityAddressId)untypedValue;
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            if (value.Uuid != null)
            {
                serializer.Serialize(writer, value.Uuid.Value.ToString("D", System.Globalization.CultureInfo.InvariantCulture));
                return;
            }
            throw new Exception("Cannot marshal type FacilityAddressId");
        }

        public static readonly FacilityAddressIdConverter Singleton = new FacilityAddressIdConverter();
    }

    internal class FacilityAddressTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FacilityAddressType) || t == typeof(FacilityAddressType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Default":
                    return FacilityAddressType.Default;
                case "Mailing":
                    return FacilityAddressType.Mailing;
                case "Physical":
                    return FacilityAddressType.Physical;
            }
            throw new Exception("Cannot unmarshal type FacilityAddressType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FacilityAddressType)untypedValue;
            switch (value)
            {
                case FacilityAddressType.Default:
                    serializer.Serialize(writer, "Default");
                    return;
                case FacilityAddressType.Mailing:
                    serializer.Serialize(writer, "Mailing");
                    return;
                case FacilityAddressType.Physical:
                    serializer.Serialize(writer, "Physical");
                    return;
            }
            throw new Exception("Cannot marshal type FacilityAddressType");
        }

        public static readonly FacilityAddressTypeConverter Singleton = new FacilityAddressTypeConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class FacilityStreetAddress2Converter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FacilityStreetAddress2) || t == typeof(FacilityStreetAddress2?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return FacilityStreetAddress2.Empty;
                case "171 Shoreline Drive":
                    return FacilityStreetAddress2.The171ShorelineDrive;
                case "19000 Caves Hwy":
                    return FacilityStreetAddress2.The19000CavesHwy;
                case "2000 Logston Blvd":
                    return FacilityStreetAddress2.The2000LogstonBlvd;
                case "855 HWY 101":
                    return FacilityStreetAddress2.The855Hwy101;
            }
            throw new Exception("Cannot unmarshal type FacilityStreetAddress2");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FacilityStreetAddress2)untypedValue;
            switch (value)
            {
                case FacilityStreetAddress2.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case FacilityStreetAddress2.The171ShorelineDrive:
                    serializer.Serialize(writer, "171 Shoreline Drive");
                    return;
                case FacilityStreetAddress2.The19000CavesHwy:
                    serializer.Serialize(writer, "19000 Caves Hwy");
                    return;
                case FacilityStreetAddress2.The2000LogstonBlvd:
                    serializer.Serialize(writer, "2000 Logston Blvd");
                    return;
                case FacilityStreetAddress2.The855Hwy101:
                    serializer.Serialize(writer, "855 HWY 101");
                    return;
            }
            throw new Exception("Cannot marshal type FacilityStreetAddress2");
        }

        public static readonly FacilityStreetAddress2Converter Singleton = new FacilityStreetAddress2Converter();
    }

    internal class FacilityStreetAddress3Converter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FacilityStreetAddress3) || t == typeof(FacilityStreetAddress3?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return FacilityStreetAddress3.Empty;
                case "PO Box 65":
                    return FacilityStreetAddress3.PoBox65;
            }
            throw new Exception("Cannot unmarshal type FacilityStreetAddress3");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FacilityStreetAddress3)untypedValue;
            switch (value)
            {
                case FacilityStreetAddress3.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case FacilityStreetAddress3.PoBox65:
                    serializer.Serialize(writer, "PO Box 65");
                    return;
            }
            throw new Exception("Cannot marshal type FacilityStreetAddress3");
        }

        public static readonly FacilityStreetAddress3Converter Singleton = new FacilityStreetAddress3Converter();
    }
}
